# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'BrainStorm2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, QtTest

from PyQt5.QtWidgets import QMessageBox, QWidget, QVBoxLayout,QLabel
from PyQt5.QtCore import QDir, Qt, QUrl, QTimer, QDateTime
from PyQt5.QtMultimedia import QMediaContent, QMediaPlayer
from PyQt5.QtMultimediaWidgets import QVideoWidget
import subprocess
import cv2
import time
from timeit import default_timer as timer
from data_prepare import *
from Models import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QPixmap
import sys



class Popup(QWidget):

    def emotiv_app(self):
        subprocess.call(["/usr/bin/open", "-W", "-n", "-a","/Applications/EmotivApps/EMOTIV Launcher.app"])

    def video_player(self):
        start = timer()
        end=0
        cap = cv2.VideoCapture("eeg with counter and cues.mp4")

        #=============================================
        if (cap.isOpened()== False):
            print("Error opening video file")
            exit()

        while(cap.isOpened()):

            # Capture frame-by-frame
            ret, frame = cap.read()

            if ret == True:
                # Display the resulting frame

                cv2.namedWindow('Frame', cv2.WINDOW_NORMAL)

                # Using resizeWindow()
                cv2.resizeWindow('Frame', 1920, 1068)
                cv2.imshow('Frame', frame)

                # Press Q on keyboard to exit
                key = cv2.waitKey(28)
                if key == ord('q'):
                    end = timer()
                    break
                if key == ord('p'):
                    cv2.waitKey(-1)

            # Break the loop
            else:
                break

        # When everything done, release
        # the video capture object
        cap.release()

        # Closes all the frames
        cv2.destroyAllWindows()
        print(end-start)
        # subprocess.call(["/usr/bin/open", "-W", "-n", "-a","/Applications/EmotivApps/EmotivPro.app"])


    #=========================================================


    def __init__(self):
        super().__init__()
        self.video_player()


    def closefn(self):
        self.close()



class Ui_MainWindow(object):
    fileName = None
    dataFile = None
    acc = 0
    rec = 0
    prec = 0
    f1 = 0

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(480, 350)
        MainWindow.setWindowTitle("BrainStorm")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        # MainWindow.setStyleSheet("background-color: #181D31")
        #===============================================
        self.ConnectButton = QtWidgets.QPushButton(self.centralwidget)
        self.ConnectButton.setObjectName("ConnectButton")
        self.ConnectButton.setText("Connect Headset")
        self.ConnectButton.clicked.connect(self.connectEmotiv)
        # self.ConnectButton.setStyleSheet("background-color: #ADA2FF")

        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(40, 20, 402, 281))
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setObjectName("label")



        self.StartButton = QtWidgets.QPushButton(self.widget)
        self.StartButton.setText("Start")
        self.StartButton.clicked.connect(self.videoPopup)
        self.StartButton.setObjectName("StartButton")
        self.verticalLayout.addWidget(self.ConnectButton)
        self.verticalLayout.addWidget(self.StartButton)
        self.verticalLayout.addLayout(self.horizontalLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        # self.StartButton.setStyleSheet("background-color: #C0DEFF")

        self.FileUpload = QtWidgets.QPushButton(self.widget)
        self.FileUpload.setObjectName("FileUpload")
        self.FileUpload.setText("Upload .csv File to Extract Data")
        self.FileUpload.clicked.connect(self.upload_csv1)
        self.verticalLayout.addWidget(self.FileUpload)
        # self.FileUpload.setStyleSheet("background-color: #FFE5F1")

        self.DataFilter = QtWidgets.QPushButton(self.widget)
        self.DataFilter.setObjectName("DataFilter")
        self.DataFilter.setText("Extract Data from uploaded file")
        self.DataFilter.clicked.connect(self.getData)
        self.verticalLayout.addWidget(self.DataFilter)
        # self.DataFilter.setStyleSheet("background-color: #FFE5F1")

        self.FileUpload2 = QtWidgets.QPushButton(self.widget)
        self.FileUpload2.setObjectName("FileUploadModel")
        self.FileUpload2.setText("Upload .csv File to Train Model")
        self.FileUpload2.clicked.connect(self.upload_csv2)
        self.verticalLayout.addWidget(self.FileUpload2)
        # self.FileUpload2.setStyleSheet("background-color: #FFF8E1")


        self.extraTree = QtWidgets.QPushButton(self.widget)
        self.extraTree.setObjectName("extraTree")
        self.extraTree.setText("Apply Extra Trees Classifier")
        self.extraTree.clicked.connect(self.extraTreeModel)
        self.verticalLayout.addWidget(self.extraTree)
        # self.extraTree.setStyleSheet("background-color: #FFF8E1")

        self.Random = QtWidgets.QPushButton(self.widget)
        self.Random.setObjectName("random")
        self.Random.setText("Apply Random Forest Classifier")
        self.Random.clicked.connect(self.randomf)
        self.verticalLayout.addWidget(self.Random)
        # self.Random.setStyleSheet("background-color: #FFF8E1")

        self.knn = QtWidgets.QPushButton(self.widget)
        self.knn.setObjectName("knn")
        self.knn.setText("Apply KNN Classifier")
        self.knn.clicked.connect(self.knnm)
        self.verticalLayout.addWidget(self.knn)
        # self.knn.setStyleSheet("color: black;"
        #                        "background-color: #FFF8E1;"
        #                        "border: 10px;")

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def getData(self):
        if(self.fileName == None):
            self.show_info_messagebox2("Please Select a File")
            return
        extractData(self.fileName)
        self.fileName = None

    def connectEmotiv(self):
        subprocess.Popen(["/usr/bin/open", "-W", "-n", "-a","/Applications/EmotivApps/EMOTIV Launcher.app"])
        print('connected')  # code to connect the emotivPro

    def videoPopup(self, checked):
        self.pop = Popup()
        self.pop.setObjectName("popup")
        self.pop.showMaximized()
        print(self.pop.isVisible())

    def upload_csv1(self):
        dialog = QtWidgets.QFileDialog()
        fname = dialog.getOpenFileName(None, "Import CSV", "", "CSV data files (*.csv)")

        self.fileName =  fname[0]

    def upload_csv2(self):
        dialog = QtWidgets.QFileDialog()
        fname = dialog.getOpenFileName(None, "Import CSV", "", "CSV data files (*.csv)")

        self.dataFile =  fname[0]

    def show_info_messagebox2(self, Model):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)

        msg.setText(Model)
        msg.setStandardButtons(QMessageBox.Ok)
        retval = msg.exec_()

    def show_info_messagebox(self, Model, acc, prec, f1, rec):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)

        msg.setText(Model)
        msg.setInformativeText("Accuracy = {0:.3f}%\nPrecision = {1:.3f}%\nRecall = {2:.3f}\nF1 score = {3:.3f}".format(acc, prec, rec, f1))
        # msg.setInformativeText("Precision = {0:.3f}%".format(prec))
        # msg.setInformativeText("Recall = {0:.3f}%".format(f1))
        # msg.setInformativeText("F1 score = {0:.3f}%".format(rec))
        msg.setWindowTitle("Scores")
        msg.setStandardButtons(QMessageBox.Ok)
        retval = msg.exec_()

    def extraTreeModel(self):
        if self.dataFile == None:
            self.show_info_messagebox("Please select a file.", self.acc)
            return
        self.acc, self.prec, self.f1, self.rec = extraTrees(self.dataFile)
        print("extra trees model")
        self.show_info_messagebox("Extra Tree Model", self.acc, self.prec, self.f1, self.rec)
        self.acc = 0
        self.rec = 0
        self.prec = 0
        self.f1 = 0
        self.dataFile = None

    def randomf(self):
        if self.dataFile == None:
            self.show_info_messagebox2("Please select a file.", self.acc)
            return
        self.acc, self.prec, self.f1, self.rec = RandomForest(self.dataFile)
        print("random forest classifier")
        self.show_info_messagebox("Random Forest Classifier", self.acc, self.prec, self.f1, self.rec)
        self.acc = 0
        self.rec = 0
        self.prec = 0
        self.f1 = 0
        self.dataFile = None

    def knnm(self):
        if self.dataFile == None:
            self.show_info_messagebox2("Please select a file.", self.acc)
            return
        self.acc, self.prec, self.f1, self.rec = KNNModel(self.dataFile)
        print("knn classifier")
        self.show_info_messagebox("KNN Classifier", self.acc, self.prec, self.f1, self.rec)
        self.acc = 0
        self.rec = 0
        self.prec = 0
        self.f1 = 0
        self.dataFile = None




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    w = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(w)
    w.show()
    sys.exit(app.exec_())

